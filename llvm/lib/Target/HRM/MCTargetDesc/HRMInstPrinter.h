//===- HRMInstPrinter.h - Convert HRM MCInst to assembly syntax -*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
///
/// \file
/// This file contains the declaration of the HRMInstPrinter class,
/// which is used to print HRM MCInst to a .s file.
///
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_HRM_INSTPRINTER_HRMINSTPRINTER_H
#define LLVM_LIB_TARGET_HRM_INSTPRINTER_HRMINSTPRINTER_H

#include "llvm/MC/MCInstPrinter.h"

namespace llvm {

class HRMInstPrinter : public MCInstPrinter {
public:
  HRMInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
                 const MCRegisterInfo &MRI)
      : MCInstPrinter(MAI, MII, MRI) {}

  // BEGIN func autogenerated by tblgen.
  std::pair<const char *, uint64_t> getMnemonic(const MCInst *MI) override;
  void printInstruction(const MCInst *MI, uint64_t Address, raw_ostream &O);
  static const char *getRegisterName(MCRegister Reg);
  // END

//   void printRegName(raw_ostream &OS, MCRegister Reg) const override;
  void printInst(const MCInst *MI, uint64_t Address, StringRef Annot,
                 const MCSubtargetInfo &STI, raw_ostream &O) override;
//   void printCCOperand(const MCInst *MI, int OpNum, raw_ostream &O);
//   void printU6(const MCInst *MI, int OpNum, raw_ostream &O);

private:
//   void printMemOperandRI(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printOperand(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printOperand(const MCInst *MI, uint64_t /*Address*/, unsigned OpNum,
                    raw_ostream &O) {
    printOperand(MI, OpNum, O);
  }
//   void printPredicateOperand(const MCInst *MI, unsigned OpNum, raw_ostream &O);
//   void printBRCCPredicateOperand(const MCInst *MI, unsigned OpNum,
//                                  raw_ostream &O);
//   void printU6ShiftedBy(unsigned ShiftBy, const MCInst *MI, int OpNum,
//                         raw_ostream &O);
};
} // end namespace llvm

#endif // LLVM_LIB_TARGET_HRM_INSTPRINTER_HRMINSTPRINTER_H
